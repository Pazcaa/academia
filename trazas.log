2020-09-17 22:31:57.907 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:66) - java.lang.NumberFormatException: For input string: " 460"
2020-09-21 10:46:25.427 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@15d151de:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:49:27.575 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@433529e9:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 10:49:27.589 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@5a82fb11:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 10:49:56.789 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@79bd2c1:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:49:59.139 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@4c990b9a:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 10:57:24.282 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@bdf087e:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:57:38.244 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@33639c2:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 10:57:38.258 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@3af02570: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 10:57:38.267 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@2c935269:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:57:45.013 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@5cd3aa0f:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:58:05.482 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@6d8bfeee: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 10:58:05.493 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@618c414d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 10:58:35.610 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@37a86970:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:01:42.783 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@491e11a4:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:01:57.752 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@426c16c2:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:01:57.781 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@3298b9b5:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:02:13.996 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:02:13.997 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:02:14.053 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:02:14.100 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:02:14.116 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:02:14.117 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:02:14.117 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:02:14.402 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@4abe978b, groups=[Ljava.lang.Class;@1cedae88}, constraintType=GENERIC}.
2020-09-21 12:02:14.413 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@65854c51, groups=[Ljava.lang.Class;@25c676a6}, constraintType=GENERIC}.
2020-09-21 12:02:14.414 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5a9491cf, groups=[Ljava.lang.Class;@3cad347b}, constraintType=GENERIC}.
2020-09-21 12:02:14.510 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@4abe978b, groups=[Ljava.lang.Class;@1cedae88}, constraintType=GENERIC}.
2020-09-21 12:02:14.527 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@37b8fec4, groups=[Ljava.lang.Class;@1239a705}, constraintType=GENERIC}.
2020-09-21 12:02:14.531 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 2 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@4ba31a6e, min=0, message=1 para rol alumno, 2 para rol profesor, payload=[Ljava.lang.Class;@9344741, max=1}, constraintType=GENERIC}.
2020-09-21 12:03:24.368 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@6a0afa51:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:03:24.377 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@5b6c4664:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:03:28.596 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:03:28.601 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:03:28.633 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:03:28.666 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:03:28.669 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:03:28.670 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:03:28.671 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:03:28.877 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@72ce38ad, groups=[Ljava.lang.Class;@51c067b}, constraintType=GENERIC}.
2020-09-21 12:03:28.885 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@2fd25779, groups=[Ljava.lang.Class;@226f64e2}, constraintType=GENERIC}.
2020-09-21 12:03:28.903 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6b665b45, groups=[Ljava.lang.Class;@56b2a0cf}, constraintType=GENERIC}.
2020-09-21 12:03:28.906 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@fa3868f, groups=[Ljava.lang.Class;@5d34eee7}, constraintType=GENERIC}.
2020-09-21 12:03:29.065 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@11c84cf1, min=6, message=Debe contener 6 caracteres, payload=[Ljava.lang.Class;@4c1c5e75, max=6}, constraintType=GENERIC}.
2020-09-21 12:03:29.083 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by thread context classloader
2020-09-21 12:03:29.083 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by validator classloader
2020-09-21 12:03:29.084 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ValidationMessages not found.
2020-09-21 12:03:29.088 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by thread context classloader
2020-09-21 12:03:29.089 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by validator classloader
2020-09-21 12:03:29.089 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ContributorValidationMessages not found.
2020-09-21 12:03:29.106 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:123) - org.hibernate.validator.ValidationMessages found.
2020-09-21 12:03:29.118 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@72ce38ad, groups=[Ljava.lang.Class;@51c067b}, constraintType=GENERIC}.
2020-09-21 12:03:29.119 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@5e68a680, groups=[Ljava.lang.Class;@1283a3f9}, constraintType=GENERIC}.
2020-09-21 12:03:29.120 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@2fd25779, groups=[Ljava.lang.Class;@226f64e2}, constraintType=GENERIC}.
2020-09-21 12:03:29.135 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@95585fd found in cache.
2020-09-21 12:03:29.136 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@5e68a680, groups=[Ljava.lang.Class;@1283a3f9}, constraintType=GENERIC}.
2020-09-21 12:03:29.137 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@220de4a5 found in cache.
2020-09-21 12:03:29.138 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 2 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6b665b45, groups=[Ljava.lang.Class;@56b2a0cf}, constraintType=GENERIC}.
2020-09-21 12:03:29.139 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 2 against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@5e68a680, groups=[Ljava.lang.Class;@1283a3f9}, constraintType=GENERIC}.
2020-09-21 12:04:23.095 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@2eaca5fa:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:04:23.105 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@68184ce5:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:04:26.563 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:04:26.566 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:04:26.598 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:04:26.622 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:04:26.625 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:04:26.626 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:04:26.626 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:04:27.026 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5f25a784, groups=[Ljava.lang.Class;@722ef9a}, constraintType=GENERIC}.
2020-09-21 12:04:27.042 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6a340d3e, groups=[Ljava.lang.Class;@2264890d}, constraintType=GENERIC}.
2020-09-21 12:04:27.044 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@2fc8c8cc, groups=[Ljava.lang.Class;@58ee2d9f}, constraintType=GENERIC}.
2020-09-21 12:04:27.132 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=100}, constraintType=GENERIC}.
2020-09-21 12:04:27.165 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6a340d3e, groups=[Ljava.lang.Class;@2264890d}, constraintType=GENERIC}.
2020-09-21 12:04:27.169 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:04:27.171 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5f25a784, groups=[Ljava.lang.Class;@722ef9a}, constraintType=GENERIC}.
2020-09-21 12:04:27.173 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@38ac7a86 found in cache.
2020-09-21 12:04:27.173 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:04:27.174 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@303e348d found in cache.
2020-09-21 12:04:27.176 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=100}, constraintType=GENERIC}.
2020-09-21 12:04:27.185 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@2b8c77ed found in cache.
2020-09-21 12:04:27.186 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@2fc8c8cc, groups=[Ljava.lang.Class;@58ee2d9f}, constraintType=GENERIC}.
2020-09-21 12:04:27.191 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@38ac7a86 found in cache.
2020-09-21 12:04:27.192 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:04:27.193 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@303e348d found in cache.
2020-09-21 12:04:27.194 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=6, message=Debe contener 6 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=6}, constraintType=GENERIC}.
2020-09-21 12:04:27.201 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by thread context classloader
2020-09-21 12:04:27.204 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by validator classloader
2020-09-21 12:04:27.205 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ValidationMessages not found.
2020-09-21 12:04:27.209 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by thread context classloader
2020-09-21 12:04:27.209 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by validator classloader
2020-09-21 12:04:27.222 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ContributorValidationMessages not found.
2020-09-21 12:04:27.228 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:123) - org.hibernate.validator.ValidationMessages found.
2020-09-21 12:04:27.272 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@349b4250:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:05:04.912 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=100}, constraintType=GENERIC}.
2020-09-21 12:05:04.914 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@2b8c77ed found in cache.
2020-09-21 12:05:04.916 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6a340d3e, groups=[Ljava.lang.Class;@2264890d}, constraintType=GENERIC}.
2020-09-21 12:05:04.917 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@38ac7a86 found in cache.
2020-09-21 12:05:04.917 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:05:04.918 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@303e348d found in cache.
2020-09-21 12:05:04.919 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5f25a784, groups=[Ljava.lang.Class;@722ef9a}, constraintType=GENERIC}.
2020-09-21 12:05:04.924 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@38ac7a86 found in cache.
2020-09-21 12:05:04.925 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:05:04.926 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@303e348d found in cache.
2020-09-21 12:05:04.927 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=100}, constraintType=GENERIC}.
2020-09-21 12:05:04.928 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@2b8c77ed found in cache.
2020-09-21 12:05:04.929 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@2fc8c8cc, groups=[Ljava.lang.Class;@58ee2d9f}, constraintType=GENERIC}.
2020-09-21 12:05:04.929 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@38ac7a86 found in cache.
2020-09-21 12:05:04.929 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@1aa08eb5, groups=[Ljava.lang.Class;@9c03b4d}, constraintType=GENERIC}.
2020-09-21 12:05:04.930 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@303e348d found in cache.
2020-09-21 12:05:04.930 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value e10adc3949ba59abbe56e057f20f883e against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77183d14, min=6, message=Debe contener 6 caracteres, payload=[Ljava.lang.Class;@423b36cd, max=6}, constraintType=GENERIC}.
2020-09-21 12:05:04.931 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@e69b92c found in cache.
2020-09-21 12:05:04.934 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@491d25c:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:05:23.962 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:05:23.966 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:05:23.994 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:05:24.014 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:05:24.017 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:05:24.018 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:05:24.018 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:06:04.049 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:06:04.051 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:06:04.084 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:06:04.101 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:06:04.104 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:06:04.105 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:06:04.106 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:06:33.718 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@4db65f77:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:06:44.812 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@6140271c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:06:44.823 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@11170f6a:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:07:12.661 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:07:12.665 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:07:12.711 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:07:12.753 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:07:12.758 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:07:12.760 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:07:12.761 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:07:13.070 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5775003f, groups=[Ljava.lang.Class;@581e53ce}, constraintType=GENERIC}.
2020-09-21 12:07:13.080 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5020fdf6, groups=[Ljava.lang.Class;@3b5e69b4}, constraintType=GENERIC}.
2020-09-21 12:07:13.204 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@4bcf77c7, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@913ef43, max=100}, constraintType=GENERIC}.
2020-09-21 12:07:13.219 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@4bcf77c7, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@913ef43, max=100}, constraintType=GENERIC}.
2020-09-21 12:07:13.221 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@496bd4bd found in cache.
2020-09-21 12:07:13.230 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5775003f, groups=[Ljava.lang.Class;@581e53ce}, constraintType=GENERIC}.
2020-09-21 12:07:13.237 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@27b913db, groups=[Ljava.lang.Class;@717d3447}, constraintType=GENERIC}.
2020-09-21 12:07:13.239 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5020fdf6, groups=[Ljava.lang.Class;@3b5e69b4}, constraintType=GENERIC}.
2020-09-21 12:07:13.241 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@6288f30e found in cache.
2020-09-21 12:07:13.241 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@27b913db, groups=[Ljava.lang.Class;@717d3447}, constraintType=GENERIC}.
2020-09-21 12:07:13.242 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@29fec7ea found in cache.
2020-09-21 12:07:13.248 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:244) - com.mysql.jdbc.JDBC42PreparedStatement@453cb2ec: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('bla bla bla', '123', 123, 2);
2020-09-21 12:07:13.278 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:261) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-21 12:07:13.282 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@73bc2fdc:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:07:21.052 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:205) - com.mysql.jdbc.JDBC42PreparedStatement@80597d6: 	SELECT
	id 'id_curso', 
	curso 'nombre_curso',
	identificador,
	horas, 
	idProfesor 
	FROM cursos  WHERE id =4 AND idProfesor = 2; 
2020-09-21 12:07:21.066 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:298) - com.mysql.jdbc.JDBC42PreparedStatement@49389ded: DELETE FROM cursos WHERE id = 4 AND idProfesor = 2 ;
2020-09-21 12:07:21.073 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@783b9358:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:07:24.099 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@19b40a67:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:26.681 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@3e268f80:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:38.437 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@491063a2:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 12:07:38.444 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@3f015e6e: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 12:07:38.455 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@5b159c1c:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:46.520 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:279) - com.mysql.jdbc.JDBC42PreparedStatement@142a65d3:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 1);
2020-09-21 12:07:46.524 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@5f0152a2: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 12:07:46.535 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@3107067d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:52.236 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@26dfcaff:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:54.073 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@1ee4fa49: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 12:07:54.081 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@2443256d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:07:55.353 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@76c80376:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:21:45.669 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@2b6b7ba6:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:22:23.958 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@5549036c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:22:23.989 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@252a1e39:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:22:56.646 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:22:56.647 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:22:56.734 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:22:56.804 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:22:56.812 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:22:56.813 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:22:56.815 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:22:57.189 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7be55d51, groups=[Ljava.lang.Class;@54bccfe2}, constraintType=GENERIC}.
2020-09-21 12:22:57.212 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5aaae574, groups=[Ljava.lang.Class;@5b3364e7}, constraintType=GENERIC}.
2020-09-21 12:22:57.357 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@5aaae574, groups=[Ljava.lang.Class;@5b3364e7}, constraintType=GENERIC}.
2020-09-21 12:22:57.371 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@49186b04, groups=[Ljava.lang.Class;@3b3030b8}, constraintType=GENERIC}.
2020-09-21 12:22:57.374 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@7be55d51, groups=[Ljava.lang.Class;@54bccfe2}, constraintType=GENERIC}.
2020-09-21 12:22:57.382 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@7f7ea72e found in cache.
2020-09-21 12:22:57.391 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=org.hibernate.validator.constraints.NotBlank, payloads=[], hasComposingConstraints=false, isReportAsSingleInvalidConstraint=true, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={org.hibernate.validator.constraints.NotBlank.message}, payload=[Ljava.lang.Class;@49186b04, groups=[Ljava.lang.Class;@3b3030b8}, constraintType=GENERIC}.
2020-09-21 12:22:57.394 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.hv.NotBlankValidator@42217f7c found in cache.
2020-09-21 12:22:57.397 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Uraga against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6fa35868, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@2630007f, max=100}, constraintType=GENERIC}.
2020-09-21 12:22:57.423 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value Ander against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6fa35868, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@2630007f, max=100}, constraintType=GENERIC}.
2020-09-21 12:22:57.431 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@df1189b found in cache.
2020-09-21 12:22:57.454 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:93) - java.lang.NumberFormatException: For input string: " 30"
2020-09-21 12:22:57.464 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@16e28513:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:25:54.067 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@1b4e76ed:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:26:05.227 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@f41d8cd:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 12:26:05.240 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@4e7cd2f6: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 12:26:05.248 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@7f789f48:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:29:18.114 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@1e096142:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:47:38.122 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@4daf12f8:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:47:51.565 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@7c5248fd:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:47:51.582 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@c98fff5:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:48:07.597 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:48:07.598 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:48:07.656 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:48:07.696 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:48:07.702 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:48:07.706 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:48:07.707 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:48:16.545 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@74f9b2c7, groups=[Ljava.lang.Class;@269d5474}, constraintType=GENERIC}.
2020-09-21 12:48:16.556 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@6da470d1, groups=[Ljava.lang.Class;@b34a09c}, constraintType=GENERIC}.
2020-09-21 12:48:16.567 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@353ef49e, groups=[Ljava.lang.Class;@459527ba}, constraintType=GENERIC}.
2020-09-21 12:48:16.668 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@1e142da0, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@ca984f8, max=1000}, constraintType=GENERIC}.
2020-09-21 12:48:16.675 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Size' validating type 'java.lang.Integer'. Check configuration for 'horas'
2020-09-21 12:48:16.679 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@357c8cd4:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:48:45.286 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 30"
2020-09-21 12:48:45.292 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@4e7cd2f6:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:49:23.862 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 30"
2020-09-21 12:49:23.865 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@1c0ca968:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:50:05.537 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 30"
2020-09-21 12:50:05.539 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@5653f288:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:52:23.329 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@1e142da0, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@ca984f8, max=1000}, constraintType=GENERIC}.
2020-09-21 12:53:52.507 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Size' validating type 'java.lang.Integer'. Check configuration for 'horas'
2020-09-21 12:53:52.512 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@478c7efa:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:54:11.288 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:54:11.293 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:54:11.331 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:54:11.362 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:54:11.367 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:54:11.368 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:54:11.368 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:54:41.958 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@28178d21, groups=[Ljava.lang.Class;@2db4b9f5}, constraintType=GENERIC}.
2020-09-21 12:54:42.004 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3388a7f, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@609e99d3, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:54:42.321 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@8c57e09, groups=[Ljava.lang.Class;@56cad116}, constraintType=GENERIC}.
2020-09-21 12:54:42.362 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@779b20b2, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@60ee2705, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:54:42.421 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@43f82827, groups=[Ljava.lang.Class;@433a032f}, constraintType=GENERIC}.
2020-09-21 12:54:42.447 DEBUG org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.parseComposingConstraints(ConstraintDescriptorImpl.java:640) - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6d8a354a, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@7c4df1f1, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:54:44.651 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3388a7f, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@609e99d3, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:54:45.114 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@28178d21, groups=[Ljava.lang.Class;@2db4b9f5}, constraintType=GENERIC}.
2020-09-21 12:54:45.172 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@779b20b2, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@60ee2705, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:54:45.212 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@3c6d53dc found in cache.
2020-09-21 12:54:45.222 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, payload=[Ljava.lang.Class;@8c57e09, groups=[Ljava.lang.Class;@56cad116}, constraintType=GENERIC}.
2020-09-21 12:54:45.232 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator@3bdee27a found in cache.
2020-09-21 12:54:45.256 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@79164d4b, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3597ad21, max=100}, constraintType=GENERIC}.
2020-09-21 12:54:45.310 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6d8a354a, min=1, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@7c4df1f1, max=2147483647}, constraintType=GENERIC}.
2020-09-21 12:55:43.525 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@1edc5044:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:55:54.579 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@80597d6:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:55:54.603 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@783b9358:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:56:17.416 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:56:17.417 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:56:17.504 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:56:17.541 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:56:17.547 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:56:17.571 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:56:17.579 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:56:50.503 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@255bea30, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@2755fc3e, max=100}, constraintType=GENERIC}.
2020-09-21 12:56:51.075 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@255bea30, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@2755fc3e, max=4}, constraintType=GENERIC}.
2020-09-21 12:56:51.119 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@255bea30, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@2755fc3e, max=1000}, constraintType=GENERIC}.
2020-09-21 12:58:04.024 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@59c5ff3b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 12:58:15.259 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@c56f3a6:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 12:58:15.281 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@7c6cb00f:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 12:58:27.167 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 12:58:27.170 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 12:58:27.225 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 12:58:27.267 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 12:58:27.284 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 12:58:27.286 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 12:58:27.288 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 12:59:09.600 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@8e7d761, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@277e9a06, max=4}, constraintType=GENERIC}.
2020-09-21 12:59:10.517 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@8e7d761, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@277e9a06, max=100}, constraintType=GENERIC}.
2020-09-21 12:59:10.620 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@8e7d761, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@277e9a06, max=1000}, constraintType=GENERIC}.
2020-09-21 12:59:34.306 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Size' validating type 'java.lang.Integer'. Check configuration for 'horas'
2020-09-21 12:59:34.312 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@5d933815:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 13:01:02.813 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 13:01:02.819 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 13:01:02.868 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 13:01:02.897 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 13:01:02.903 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 13:01:02.905 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 13:01:02.906 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 13:01:42.160 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@7cd6d6d3, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@3b8a4ecb, max=1000}, constraintType=GENERIC}.
2020-09-21 13:01:48.642 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Size' validating type 'java.lang.Integer'. Check configuration for 'horas'
2020-09-21 13:01:48.644 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:43) - java.lang.NullPointerException
2020-09-21 13:02:04.988 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@634c3b9:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 13:02:05.004 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@633507fc:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 13:02:24.622 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value 30 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@7cd6d6d3, min=0, message=No debe exceder las 1000 horas, payload=[Ljava.lang.Class;@3b8a4ecb, max=1000}, constraintType=GENERIC}.
2020-09-21 13:03:16.581 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Size' validating type 'java.lang.Integer'. Check configuration for 'horas'
2020-09-21 13:03:57.110 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:43) - java.lang.NullPointerException
2020-09-21 13:04:13.772 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@4bfaf51:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 13:04:13.782 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@52804638:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 13:04:24.623 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 13:04:24.625 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 13:04:24.653 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 13:04:24.678 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 13:04:24.682 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 13:04:24.682 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 13:04:24.683 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 13:04:37.744 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@13342809, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@17817248, max=4}, constraintType=GENERIC}.
2020-09-21 13:04:38.220 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@13342809, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@17817248, max=100}, constraintType=GENERIC}.
2020-09-21 13:04:46.979 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:244) - com.mysql.jdbc.JDBC42PreparedStatement@66652ca1: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-21 13:04:47.253 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:261) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-21 13:04:55.826 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@37627058:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 13:05:06.341 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@fedde80:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:09.937 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@71a2d6ca:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 13:05:11.053 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@5549036c:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:22.884 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@426c16c2:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:05:22.891 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@3511cf9: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:05:22.901 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@3298b9b5:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:30.977 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:279) - com.mysql.jdbc.JDBC42PreparedStatement@5e663be5:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 5);
2020-09-21 13:05:30.982 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@1f5b31de: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:05:30.989 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@2e0e0aae:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:39.564 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@132680bc:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:41.627 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@6177e4dc: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:05:41.632 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@4851a0e2:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:05:43.000 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@1e860ccb:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:11:54.431 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@6b357245:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:12:19.293 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@5d3404c8:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:12:19.301 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@2d5f74fe: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:12:19.322 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@7c26f1bc:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:12:32.375 ERROR academia.controller.InscribirCursoController.doPost(InscribirCursoController.java:61) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '4-5' for key 'alumnosCurso_UN'
2020-09-21 13:12:32.383 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@79e82b7e: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:12:32.392 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@7c9fd096:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:12:40.216 ERROR academia.controller.InscribirCursoController.doPost(InscribirCursoController.java:61) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '4-1' for key 'alumnosCurso_UN'
2020-09-21 13:12:40.220 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@29b7a1dc: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:12:40.226 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@688aabe7:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:12:44.876 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@712eaa0f:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:52:16.740 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@35839b5b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:52:31.704 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@611ca657:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:52:31.725 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@11cb4af4: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:52:31.732 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@400e5323:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:53:33.425 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@76862677:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:53:33.433 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@7994b9f6: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:53:33.455 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@4bcd6fbf:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:53:43.765 ERROR academia.controller.InscribirCursoController.doPost(InscribirCursoController.java:61) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '4-1' for key 'alumnosCurso_UN'
2020-09-21 13:53:43.768 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@2e363cd1: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:53:43.778 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@27598a0f:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:54:01.104 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@5549036c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:54:01.111 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@3865383a: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:54:01.120 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@40d171e4:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:54:03.006 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@426c16c2:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:54:04.834 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@321c4922: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:54:04.838 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@130ebc56:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:55:11.094 ERROR academia.controller.AlumnoController.doGet(AlumnoController.java:46) - java.lang.NullPointerException
2020-09-21 13:55:26.231 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@58d568c3:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456');
2020-09-21 13:55:26.244 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@23d7e5e2: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:55:26.252 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@51a0ff07:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:55:28.824 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@64cca9fc:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:55:30.735 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@740e2440: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:55:30.739 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@35332e7b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:55:36.947 ERROR academia.controller.InscribirCursoController.doPost(InscribirCursoController.java:61) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '4-1' for key 'alumnosCurso_UN'
2020-09-21 13:55:36.953 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:165) - com.mysql.jdbc.JDBC42PreparedStatement@5ecf9c5e: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 ;
2020-09-21 13:55:36.961 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@1268063b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:55:45.933 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@40821e20:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 13:58:15.745 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@139cd645:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 14:00:47.671 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:51) - com.mysql.jdbc.JDBC42PreparedStatement@1015f309:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 FROM usuarios u  WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456');
2020-09-21 14:00:47.703 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@60b36ff0:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 14:01:08.951 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-21 14:01:08.956 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-21 14:01:09.025 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-21 14:01:09.060 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-21 14:01:09.068 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-21 14:01:09.069 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-21 14:01:09.071 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-21 14:01:09.196 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 450"
2020-09-21 14:01:09.202 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@39992e36:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 14:02:18.984 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value bs34 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77f02845, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@3ddac593, max=4}, constraintType=GENERIC}.
2020-09-21 14:02:18.999 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value bootstrap against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@77f02845, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3ddac593, max=100}, constraintType=GENERIC}.
2020-09-21 14:02:19.003 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:244) - com.mysql.jdbc.JDBC42PreparedStatement@1e6acd8e: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('bootstrap', 'bs34', 30, 2);
2020-09-21 14:02:19.031 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:261) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-21 14:02:19.040 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@2b683273:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 14:02:27.839 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:205) - com.mysql.jdbc.JDBC42PreparedStatement@f7abcc: 	SELECT
	id 'id_curso', 
	curso 'nombre_curso',
	identificador,
	horas, 
	idProfesor 
	FROM cursos  WHERE id =6 AND idProfesor = 2; 
2020-09-21 14:02:27.846 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:298) - com.mysql.jdbc.JDBC42PreparedStatement@4546dfc3: DELETE FROM cursos WHERE id = 6 AND idProfesor = 2 ;
2020-09-21 14:02:27.848 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@4b4874ba:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 14:02:30.284 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@74c1420d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-21 14:02:32.468 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:131) - com.mysql.jdbc.JDBC42PreparedStatement@1a978a17:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2;
2020-09-21 14:02:35.028 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:91) - com.mysql.jdbc.JDBC42PreparedStatement@448cc01f:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id ;
2020-09-22 09:05:19.331 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@46d38abb:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:05:34.905 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@85ed129:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:05:34.929 ERROR academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:67) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'c.id' in 'order clause'
2020-09-22 09:05:43.179 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@24697bcb:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:05:43.183 ERROR academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:67) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'c.id' in 'order clause'
2020-09-22 09:06:30.411 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@2447cee0:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 09:06:30.448 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@663a9519:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:06:51.562 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 09:06:51.565 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 09:06:51.630 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 09:06:51.670 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 09:06:51.680 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 09:06:51.681 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 09:06:51.685 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 09:06:52.106 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value bs35 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@682097e, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@3cfc5bc9, max=4}, constraintType=GENERIC}.
2020-09-22 09:06:52.123 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value bootstrap against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@682097e, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3cfc5bc9, max=100}, constraintType=GENERIC}.
2020-09-22 09:06:52.136 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:252) - com.mysql.jdbc.JDBC42PreparedStatement@5736893f: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('bootstrap', 'bs35', 35, 2);
2020-09-22 09:06:52.186 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:269) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 09:06:52.188 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@3f155a29:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:00.910 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@3ad7cdf4:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:04.345 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@4665f026:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:05.975 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@3c55309d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:17.090 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@3b0fbabe:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:17.104 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@71fbe415: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:17.118 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@9a52680:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:26.624 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:287) - com.mysql.jdbc.JDBC42PreparedStatement@3c459084:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 6);
2020-09-22 09:07:26.632 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@7d789abf: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:26.644 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@4ccf605b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:32.286 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@feced3e:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:34.683 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@53bf56dc: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:34.694 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@235a2b2a:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:07:36.973 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@23b8d689:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:25:17.728 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 09:25:22.313 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@1e166b12:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:01.658 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5dd0a28e:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:01.686 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@2d3bb6ea:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:01.696 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:26:05.599 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@649ca1d:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:07.467 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@5d7e5e36:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:07.471 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:26:35.290 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 09:26:35.292 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 09:26:35.353 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 09:26:35.392 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 09:26:35.402 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 09:26:35.405 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 09:26:35.406 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 09:26:35.790 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value  MS45 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3bffed93, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@3ebbc115, max=4}, constraintType=GENERIC}.
2020-09-22 09:26:35.815 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by thread context classloader
2020-09-22 09:26:35.816 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by validator classloader
2020-09-22 09:26:35.816 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ValidationMessages not found.
2020-09-22 09:26:35.822 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by thread context classloader
2020-09-22 09:26:35.823 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by validator classloader
2020-09-22 09:26:35.824 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ContributorValidationMessages not found.
2020-09-22 09:26:35.828 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:123) - org.hibernate.validator.ValidationMessages found.
2020-09-22 09:26:35.854 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value  MySQL against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3bffed93, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3ebbc115, max=100}, constraintType=GENERIC}.
2020-09-22 09:26:35.859 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@bcf409a:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:26:35.862 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:27:09.553 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 450"
2020-09-22 09:27:09.565 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@38a3688:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:27:09.573 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:27:24.264 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@7b273917:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:27:24.267 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:27:46.490 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 234"
2020-09-22 09:27:46.495 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@318920f1:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:27:46.505 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:28:48.471 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value MS45 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3bffed93, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@3ebbc115, max=4}, constraintType=GENERIC}.
2020-09-22 09:28:48.473 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@66ac6a9d found in cache.
2020-09-22 09:28:48.482 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value MySQL against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3bffed93, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3ebbc115, max=100}, constraintType=GENERIC}.
2020-09-22 09:28:48.484 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@5d4bb83c found in cache.
2020-09-22 09:28:48.492 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:252) - com.mysql.jdbc.JDBC42PreparedStatement@2315648b: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('MySQL', 'MS45', 450, 2);
2020-09-22 09:28:48.537 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:269) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 09:28:48.540 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@7a976c19:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:28:48.541 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:28:55.865 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@67b6820:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:28:58.126 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:139) - com.mysql.jdbc.JDBC42PreparedStatement@1dd7e41a:  SELECT 
	c.id 'id_curso',
	c.curso 'curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'id_profesor',
	CONCAT(u.nombre, ' ', u.apellidos) as 'nombre_profesor'
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:28:58.130 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 09:29:00.298 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@7546653c:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:13.416 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@c5bf1cd:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:13.421 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@5687b3bb: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:13.433 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@37634b56:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:13.434 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 09:29:22.888 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:287) - com.mysql.jdbc.JDBC42PreparedStatement@44bd0217:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 7);
2020-09-22 09:29:22.903 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@7f730601: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:22.910 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@664cb531:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:22.914 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 09:29:26.770 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@1322b058:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:28.385 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:173) - com.mysql.jdbc.JDBC42PreparedStatement@642e1820: 	SELECT
	c.id 'id_curso',
	c.curso 'nombre_curso',
	c.identificador 'identificador',
	c.horas 'horas',
	u.nombre 'nombre_profesor',
	u.apellidos 'apellido_profesor'
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:28.389 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@1ec5531b:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 09:29:28.390 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 09:29:31.786 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:99) - com.mysql.jdbc.JDBC42PreparedStatement@4efc2dec:  SELECT 
	c.id 'curso_id',
	c.identificador, 
	c.curso 'curso_nombre',
	c.horas,
	p.id 'profesor_id',
	p.nombre 'profesor_nombre',
	p.apellidos 'profesor_apellido',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:01:13.339 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:01:17.653 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:102) - com.mysql.jdbc.JDBC42PreparedStatement@5973b4c3:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:01:17.701 ERROR academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:110) - java.sql.SQLException: Column 'password' not found.
2020-09-22 10:02:24.369 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:102) - com.mysql.jdbc.JDBC42PreparedStatement@274ab983:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:07:45.273 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:07:49.743 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@27bf7c12:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:05.070 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5205f0fd:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:05.106 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@2261ae1f:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:05.131 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:08:12.872 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@7f0e7eeb:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:14.872 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@73e366af:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:14.877 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:08:19.525 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@5aa15099: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:19.553 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:08:19.556 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@787ce314:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:19.563 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:08:25.392 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@25cfb380: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:25.394 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:08:25.400 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@6d98db95:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:25.409 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:08:28.732 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@1a6ba2cd: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =6 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:28.739 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =6 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:08:28.741 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@3d43613b:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:28.744 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:08:32.796 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@59741254: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =5 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:32.800 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =5 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:08:32.802 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@1c76971e:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:08:32.806 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:09:02.556 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@69a7d0c9: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:11:05.540 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:11:05.543 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@710eff56:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:11:05.562 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:12:13.593 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@38d5623: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:14:40.691 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:14:45.140 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@2d681447:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:15:02.103 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@7a7ea04c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:15:02.128 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@a32b598:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:15:02.135 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:15:45.432 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@73cf8bd7: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:17:03.613 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY ' at line 9
2020-09-22 10:17:03.619 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@598cbfc:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:17:03.624 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:17:31.765 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 10:17:32.885 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:17:58.726 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - java.lang.NullPointerException
2020-09-22 10:17:58.734 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:43) - java.lang.NullPointerException
2020-09-22 10:17:58.735 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:17:58.739 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-22 10:18:11.367 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@387169e1:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:18:11.374 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@37adea60:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:18:11.378 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:18:35.069 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@d3ffe83: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND c.idProfesor = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:20:35.441 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:20:39.039 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@3978fca6:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:21:17.095 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@46c8dce7:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:21:17.109 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@36b853ee:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:21:17.113 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:21:27.320 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@70602f57: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:21:27.361 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC' at line 9
2020-09-22 10:21:27.372 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@4f366a84:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:21:27.405 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:22:00.898 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@196503da: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:22:35.070 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM cursos, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC' at line 9
2020-09-22 10:22:35.073 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@1d5a842e:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:22:35.080 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:25:27.121 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 10:25:28.482 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:25:35.867 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - java.lang.NullPointerException
2020-09-22 10:25:35.874 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:43) - java.lang.NullPointerException
2020-09-22 10:25:35.875 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:25:35.876 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-22 10:25:50.334 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@69b7f429:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:25:50.351 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@251eb13c:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:25:50.355 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:25:54.053 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@78bba0ea: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:26:22.097 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`academia`.`alumnosCurso`, CONSTRAINT `FK_cursos` FOREIGN KEY (`idCurso`) REFERENCES `cursos` (`id`))
2020-09-22 10:26:22.102 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@3862553d:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:26:22.110 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:28:09.626 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@28cb7399: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:17.925 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`academia`.`alumnosCurso`, CONSTRAINT `FK_cursos` FOREIGN KEY (`idCurso`) REFERENCES `cursos` (`id`))
2020-09-22 10:28:17.930 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@69f679a2:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:17.939 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:28:22.253 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@36c24862:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:32.522 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@66f2111c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:32.531 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@27cf1b27:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:32.536 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:28:37.299 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@34aec044: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:59.741 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`academia`.`alumnosCurso`, CONSTRAINT `FK_cursos` FOREIGN KEY (`idCurso`) REFERENCES `cursos` (`id`))
2020-09-22 10:28:59.745 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@3fbd1cb:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:28:59.750 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:30:13.710 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 10:30:13.712 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 10:30:13.753 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 10:30:13.777 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 10:30:13.780 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 10:30:13.781 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 10:30:13.781 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 10:30:14.108 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js45  against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@17a43086, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@4326407b, max=4}, constraintType=GENERIC}.
2020-09-22 10:30:14.136 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by thread context classloader
2020-09-22 10:30:14.137 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by validator classloader
2020-09-22 10:30:14.137 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ValidationMessages not found.
2020-09-22 10:30:14.141 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by thread context classloader
2020-09-22 10:30:14.142 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by validator classloader
2020-09-22 10:30:14.142 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ContributorValidationMessages not found.
2020-09-22 10:30:14.144 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:123) - org.hibernate.validator.ValidationMessages found.
2020-09-22 10:30:14.168 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value javascript2 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@17a43086, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@4326407b, max=100}, constraintType=GENERIC}.
2020-09-22 10:30:14.172 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@8dca4c2:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:30:14.175 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:30:38.944 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 45"
2020-09-22 10:30:38.947 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@64026bc0:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:30:38.959 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:38:24.883 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 45"
2020-09-22 10:38:24.886 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:43) - java.lang.NullPointerException
2020-09-22 10:38:24.887 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:38:24.888 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-22 10:38:33.107 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@8dbc777:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:38:33.112 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@520a7589:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:38:33.118 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:39:03.361 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js45 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@17a43086, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@4326407b, max=4}, constraintType=GENERIC}.
2020-09-22 10:39:03.366 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@400afe39 found in cache.
2020-09-22 10:39:03.367 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value javascript2 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@17a43086, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@4326407b, max=100}, constraintType=GENERIC}.
2020-09-22 10:39:03.368 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@443562e0 found in cache.
2020-09-22 10:39:10.554 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:222) - com.mysql.jdbc.JDBC42PreparedStatement@2790ec3d: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('javascript2', 'js45', 45, 2);
2020-09-22 10:39:10.594 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:239) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 10:39:16.195 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@5fb1735d:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:16.249 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:39:24.011 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@713fd209: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =8 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:24.023 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:276) - com.mysql.jdbc.JDBC42PreparedStatement@9c3f2c4: DELETE FROM cursos WHERE id = 8 AND idProfesor = 2 ;
2020-09-22 10:39:24.026 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@3342e661:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:24.029 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:39:33.156 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@38fd123c: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:33.164 ERROR academia.controller.EliminarCursoController.doGet(EliminarCursoController.java:49) - com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`academia`.`alumnosCurso`, CONSTRAINT `FK_cursos` FOREIGN KEY (`idCurso`) REFERENCES `cursos` (`id`))
2020-09-22 10:39:33.167 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@729b5299:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:33.172 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:39:42.650 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@39ccdf9a:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:44.013 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@55dc2bf1:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:44.016 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:39:45.730 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@16237b9b:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:57.043 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5b31e917:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:57.048 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@15452097: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:57.055 ERROR academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:176) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND' at line 9
2020-09-22 10:39:57.061 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@67fa2ed:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:39:57.062 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:41:40.631 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@301f9db9:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:41:40.636 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@a3654d1: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos'
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:41:40.639 ERROR academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:176) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND' at line 9
2020-09-22 10:41:40.645 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@344ae522:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:41:40.655 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:44:36.348 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 10:44:37.006 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 10:44:38.430 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@19e6c797:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:44:38.439 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@7071c65b: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:44:38.449 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@50765474:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:44:38.452 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:45:07.841 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:257) - com.mysql.jdbc.JDBC42PreparedStatement@443338d5:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 3);
2020-09-22 10:45:07.856 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@350876fb: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:07.867 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@614fe3e2:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:07.869 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:45:19.685 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@2d7153d9:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:21.798 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@3d337860: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:21.816 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@5acc5303:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:21.817 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:45:24.020 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@7fb9b01e:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:45:57.435 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@322fdf32:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:12.590 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@2cc36ec7:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:12.602 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@112a9367:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:12.605 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:46:16.073 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@6cba52f3: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =7 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:16.080 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:276) - com.mysql.jdbc.JDBC42PreparedStatement@5ec17b95: DELETE FROM cursos WHERE id = 7 AND idProfesor = 2 ;
2020-09-22 10:46:16.082 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@49972e4f:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:16.085 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:46:29.816 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:192) - com.mysql.jdbc.JDBC42PreparedStatement@41ae44f0: 	SELECT
	c.id 'curso_id', 
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios u  WHERE c.id =5 AND u.id = 2 
    ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:29.830 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:276) - com.mysql.jdbc.JDBC42PreparedStatement@934ecb: DELETE FROM cursos WHERE id = 5 AND idProfesor = 2 ;
2020-09-22 10:46:29.833 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@31d9aa07:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:29.835 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:46:43.235 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 10:46:43.237 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 10:46:43.273 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 10:46:43.297 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 10:46:43.300 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 10:46:43.300 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 10:46:43.301 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 10:46:43.418 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: " 20"
2020-09-22 10:46:43.420 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@37300124:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:43.422 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:46:58.873 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6fef84c7, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@3ebdbf9f, max=100}, constraintType=GENERIC}.
2020-09-22 10:46:58.885 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@6fef84c7, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@3ebdbf9f, max=4}, constraintType=GENERIC}.
2020-09-22 10:46:58.890 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:222) - com.mysql.jdbc.JDBC42PreparedStatement@489e6f9d: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 20, 2);
2020-09-22 10:46:58.903 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:239) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 10:46:58.906 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@77c26dd9:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:46:58.908 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:47:02.688 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@1ae303b5:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:04.091 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:136) - com.mysql.jdbc.JDBC42PreparedStatement@17e075f:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:04.093 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 10:47:05.436 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@32b6a0a4:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:32.072 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@1a57b99b:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:32.080 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@5b6ab3a0: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:32.090 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@6a7bed7b:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:32.092 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:47:41.504 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:257) - com.mysql.jdbc.JDBC42PreparedStatement@380bd2a3:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 6);
2020-09-22 10:47:41.506 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@10f8f766: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:41.512 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@661a3ae9:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:41.513 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:47:44.513 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@1d1ed87f:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:45.972 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:164) - com.mysql.jdbc.JDBC42PreparedStatement@7521e3c7: 	SELECT
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM alumnosCurso ac , usuarios u , cursos c 
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:45.979 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@db6a889:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:47:45.981 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 10:47:47.171 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:109) - com.mysql.jdbc.JDBC42PreparedStatement@7777d01e:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 10:52:30.022 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 10:52:30.921 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 11:42:39.213 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 11:42:43.363 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:122) - com.mysql.jdbc.JDBC42PreparedStatement@2e8c1c44:  SELECT 
	c.id 'curso_id',
	c.identificador 'identificador', 
	c.curso 'curso_nombre',
	c.horas 'horas',
	p.id 'usuario_id',
	p.nombre 'usuario_nombre',
	p.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c, usuarios p 
	WHERE c.idProfesor = p.id 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 11:43:05.433 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@d3ffe83:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 11:43:05.448 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:149) - com.mysql.jdbc.JDBC42PreparedStatement@7d04dd46:  SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u WHERE c.idProfesor = u.id AND u.id = 2 
   ORDER BY c.id ASC 
 	LIMIT 500 ;
2020-09-22 11:43:05.458 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:204) - com.mysql.jdbc.JDBC42PreparedStatement@2c2d0bf7: 	SELECT 
	c.id 'curso_id',
	c.curso 'curso_nombre',
	c.identificador 'identificador',
	c.horas 'horas',
	u.id 'usuario_id',
	u.nombre 'usuario_nombre',
	u.apellidos 'usuario_apellidos',
	rol 
	FROM cursos c , usuarios u , alumnosCurso ac 
	WHERE c.idProfesor = u.id AND c.id = ac.idCurso AND u.id = 2 
	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;
2020-09-22 11:43:05.464 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 22:54:15.092 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 22:54:20.127 ERROR academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:165) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cur' at line 10
2020-09-22 22:57:22.920 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@70ff4cb7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 22:57:26.812 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 22:57:27.559 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 22:57:43.322 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@72694c0:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 22:57:43.345 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@48c7d3ed: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 22:57:43.355 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@205ed46f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 22:57:43.380 ERROR academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:251) - com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500' at line 12
2020-09-22 22:57:43.386 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 22:59:38.420 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 22:59:39.352 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 22:59:42.315 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@3caa449b:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 22:59:42.428 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@1a7372ca: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 22:59:42.459 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@74efcfe0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 22:59:42.463 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:00:14.644 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@2833c6e7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:00:16.764 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@5cd20d79: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:00:16.773 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:00:44.437 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 23:00:44.442 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 23:00:44.501 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 23:00:44.553 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 23:00:44.572 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 23:00:44.576 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 23:00:44.579 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 23:00:45.060 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@c614775, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@cd8f9f4, max=100}, constraintType=GENERIC}.
2020-09-22 23:00:45.088 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@c614775, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@cd8f9f4, max=4}, constraintType=GENERIC}.
2020-09-22 23:00:45.098 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:297) - com.mysql.jdbc.JDBC42PreparedStatement@6e35917a: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-22 23:00:45.122 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:314) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 23:00:45.137 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@77cbfaab: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:00:45.143 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:01:01.329 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@10bf83ba: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:01:03.468 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@71a02f79: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:01:03.474 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:01:08.890 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@2420fe92: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:01:25.916 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@11d7b7c:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:01:25.921 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@40207147: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:01:25.951 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@71aaf60f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:01:25.964 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:01:46.276 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@55716a4e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:00.754 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@31ad76ce:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:02:00.765 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:212) - com.mysql.jdbc.JDBC42PreparedStatement@35e3abda: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:00.778 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@7e72b6ac: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:00.784 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 23:02:10.993 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@780ef80c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:14.203 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:212) - com.mysql.jdbc.JDBC42PreparedStatement@f000e13: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:14.228 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@5890bbce: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:02:14.231 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-22 23:02:17.940 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@4e69bcb9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:07:40.808 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5beac455:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:07:40.816 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@284303b8: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:07:40.821 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@46ddbe54: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:07:40.828 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:08:31.413 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@2cba6256:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:08:31.423 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@6086c97c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:08:31.433 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@61134c3f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:08:31.438 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:11:16.755 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 23:11:17.307 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 23:11:29.009 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@707c374e:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:11:29.027 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@4a5ea8b7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:11:29.033 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@646851c1: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:11:29.037 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:11:34.913 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@5d4c199: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:11:37.724 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@43ade96d: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:11:37.729 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@290e356: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:11:37.734 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:11:41.360 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@784bcace: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:12:42.438 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@660ad5a8:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:12:42.444 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@2737df93: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:12:42.452 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@16da387e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:12:42.457 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:13:08.238 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 23:13:08.240 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 23:13:08.277 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 23:13:08.306 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 23:13:08.310 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 23:13:08.311 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 23:13:08.312 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 23:13:08.735 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3f6e5094, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@24eab4dc, max=4}, constraintType=GENERIC}.
2020-09-22 23:13:08.766 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@3f6e5094, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@24eab4dc, max=100}, constraintType=GENERIC}.
2020-09-22 23:13:08.787 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:297) - com.mysql.jdbc.JDBC42PreparedStatement@696fd1c5: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-22 23:14:14.142 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:314) - java.sql.SQLException: Generated keys not requested. You need to specify Statement.RETURN_GENERATED_KEYS to Statement.executeUpdate(), Statement.executeLargeUpdate() or Connection.prepareStatement().
2020-09-22 23:14:57.308 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@30cf1884: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:14:57.386 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@2b31bc64: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:14:57.450 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:17:41.047 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-22 23:17:42.515 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 23:17:57.427 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 23:17:57.433 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 23:17:57.485 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 23:17:57.525 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 23:17:57.530 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 23:17:57.532 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 23:17:57.533 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 23:17:57.964 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@337c9df0, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@506d08f4, max=100}, constraintType=GENERIC}.
2020-09-22 23:17:57.982 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@337c9df0, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@506d08f4, max=4}, constraintType=GENERIC}.
2020-09-22 23:17:58.629 ERROR academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:314) - java.lang.NullPointerException
2020-09-22 23:17:58.635 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:47) - java.lang.NullPointerException
2020-09-22 23:17:58.636 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:17:58.638 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-22 23:18:10.954 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@4e62dd14:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:18:10.964 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@f5fd72f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:18:10.973 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@3e9a78af: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:18:10.977 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:18:33.410 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@337c9df0, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@506d08f4, max=100}, constraintType=GENERIC}.
2020-09-22 23:18:33.414 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@5711fea4 found in cache.
2020-09-22 23:18:33.417 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@337c9df0, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@506d08f4, max=4}, constraintType=GENERIC}.
2020-09-22 23:18:33.419 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@532e709e found in cache.
2020-09-22 23:18:33.436 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:297) - com.mysql.jdbc.JDBC42PreparedStatement@7f4c94df: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-22 23:18:55.297 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@76030bd0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:18:55.326 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@4faa3590: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:18:55.338 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:20:51.092 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-22 23:20:56.369 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@12135363: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:22:11.485 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@530eb83e:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-22 23:22:11.507 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@23eb6487: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:22:11.516 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@721c4d4a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:22:11.521 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:22:26.818 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-22 23:22:26.823 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-22 23:22:26.918 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-22 23:22:26.960 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-22 23:22:26.968 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-22 23:22:26.970 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-22 23:22:26.973 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-22 23:22:27.504 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@2d3578da, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@5494b53b, max=100}, constraintType=GENERIC}.
2020-09-22 23:22:27.533 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@2d3578da, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@5494b53b, max=4}, constraintType=GENERIC}.
2020-09-22 23:22:27.543 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:297) - com.mysql.jdbc.JDBC42PreparedStatement@3d451067: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-22 23:22:27.574 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@7e517058: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:22:27.598 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@64910383: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:22:27.621 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:24:42.432 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@5dd0a28e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:24:49.932 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@41d814f5: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:24:49.948 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@54c6b1dd: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-22 23:24:49.957 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-22 23:24:54.636 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@5a118fae: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:50:28.786 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 08:50:34.660 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@12e29e16: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:50:50.466 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@3ed61e9d:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 08:50:50.475 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@4e5e6f4f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:50:50.492 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@1fc4ebe9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:50:50.494 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 08:51:11.864 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-23 08:51:11.866 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-23 08:51:11.911 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-23 08:51:11.945 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-23 08:51:11.949 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-23 08:51:11.950 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-23 08:51:11.950 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-23 08:51:12.160 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "20 "
2020-09-23 08:51:12.164 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@6f7b808b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:51:12.167 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@7d9350d3: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:51:12.180 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 08:52:00.329 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "20 "
2020-09-23 08:52:00.340 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@6ec4c92b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:52:00.351 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@4421b256: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:52:00.354 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 08:52:41.124 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value java script against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@45e6ca60, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@1f4fdb66, max=100}, constraintType=GENERIC}.
2020-09-23 08:52:41.145 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@45e6ca60, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@1f4fdb66, max=4}, constraintType=GENERIC}.
2020-09-23 08:52:41.150 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:297) - com.mysql.jdbc.JDBC42PreparedStatement@ef4e4f9: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('java script', 'js20', 30, 2);
2020-09-23 08:53:19.261 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@1393acc6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:53:19.326 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@6a6d1c98: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:53:19.375 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 08:53:43.650 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@449b71a5: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:53:46.379 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:184) - com.mysql.jdbc.JDBC42PreparedStatement@4a853ca0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:53:46.385 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:239) - com.mysql.jdbc.JDBC42PreparedStatement@3e3ed949: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 08:53:46.387 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:10:47.955 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 09:10:53.819 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:157) - com.mysql.jdbc.JDBC42PreparedStatement@37349880: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM alumnosCurso ac , usuarios u , cursos c  
	WHERE ac.idCurso = c.id AND c.idProfesor = u.id 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:24:35.455 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 09:24:37.585 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 09:24:39.147 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@5f088d59: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:24:54.604 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@3ed45967:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:24:54.624 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@a1304c6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:24:54.632 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@a2ea9f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:24:54.645 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:31:15.993 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5014d230:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:31:16.009 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1129d80b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:31:16.016 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@20f20fe1: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:31:16.026 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:31:43.749 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@37039541: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:45:46.794 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 09:45:52.418 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1b6929a4: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:46:05.594 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@6ced0bcb:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:46:26.850 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5b9b578e:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:46:26.895 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@678baf05: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:46:26.914 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@26b6a53e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:46:26.929 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:46:27.250 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 09:46:29.091 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 09:46:55.578 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-23 09:46:55.584 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-23 09:46:55.668 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-23 09:46:55.740 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-23 09:46:55.765 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-23 09:46:55.766 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-23 09:46:55.766 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-23 09:46:56.070 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "20 "
2020-09-23 09:46:56.072 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:47) - java.lang.NullPointerException
2020-09-23 09:46:56.073 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:46:56.076 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-23 09:48:51.055 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 09:48:56.221 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1b0dbe9b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:49:11.211 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@4046d30a:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:49:11.256 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@71098fb7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:49:11.289 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@3034858c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:49:11.319 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:50:06.139 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-23 09:50:06.141 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-23 09:50:06.199 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-23 09:50:06.236 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-23 09:50:06.243 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-23 09:50:06.244 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-23 09:50:06.246 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-23 09:50:06.449 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "20 "
2020-09-23 09:50:06.464 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@308bcc9c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:50:06.467 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@9301809: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:50:06.481 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:51:26.708 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value javascritp2  against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@5c44f269, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@2b13d186, max=100}, constraintType=GENERIC}.
2020-09-23 09:51:26.731 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js10  against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@5c44f269, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@2b13d186, max=4}, constraintType=GENERIC}.
2020-09-23 09:51:26.738 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by thread context classloader
2020-09-23 09:51:26.739 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ValidationMessages not found by validator classloader
2020-09-23 09:51:26.739 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ValidationMessages not found.
2020-09-23 09:51:26.743 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by thread context classloader
2020-09-23 09:51:26.744 TRACE org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(PlatformResourceBundleLocator.java:151) - ContributorValidationMessages not found by validator classloader
2020-09-23 09:51:26.744 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:126) - ContributorValidationMessages not found.
2020-09-23 09:51:26.752 DEBUG org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.getResourceBundle(PlatformResourceBundleLocator.java:123) - org.hibernate.validator.ValidationMessages found.
2020-09-23 09:51:26.775 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@278a8ea1: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:51:26.783 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@5a060584: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:51:26.787 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:51:54.365 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "20 "
2020-09-23 09:51:54.369 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1f176b09: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:51:54.372 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@6dc308b1: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:51:54.375 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:52:31.799 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "450 "
2020-09-23 09:52:31.804 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@2591f9e6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:52:31.809 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@6a4ce1f8: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:52:31.813 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:54:19.001 ERROR academia.controller.CrearCursoController.doPost(CrearCursoController.java:96) - java.lang.NumberFormatException: For input string: "45 "
2020-09-23 09:54:19.005 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@39640a5c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:54:19.014 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@50449896: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:54:19.018 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:55:10.621 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@5b7ba23a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:58:23.562 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@772191bf: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:58:39.837 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@26e861be:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 09:58:39.885 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@57280cbe: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:58:39.893 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@16150685: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:58:39.899 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:59:01.426 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value javascript2 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@5c44f269, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@2b13d186, max=100}, constraintType=GENERIC}.
2020-09-23 09:59:01.437 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@20761c84 found in cache.
2020-09-23 09:59:01.439 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js45 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@5c44f269, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@2b13d186, max=4}, constraintType=GENERIC}.
2020-09-23 09:59:01.445 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager.getInitializedValidator(ConstraintValidatorManager.java:113) - Constraint validator org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence@704f42fa found in cache.
2020-09-23 09:59:01.448 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:299) - com.mysql.jdbc.JDBC42PreparedStatement@2c4f6df3: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('javascript2', 'js45', 20, 2);
2020-09-23 09:59:01.463 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@7f10d914: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:59:01.466 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@483937b7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:59:01.470 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:59:06.074 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@2a59e622: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =15 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:59:06.089 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:353) - com.mysql.jdbc.JDBC42PreparedStatement@769cbfdd: DELETE FROM cursos WHERE id = 15 AND idProfesor = 2 ;
2020-09-23 09:59:06.092 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@51396a6e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:59:06.099 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@30c452f9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 09:59:06.103 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 09:59:16.450 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@27b7e356: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:10:22.131 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:10:23.590 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:10:30.690 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@7c4cd87f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:15:25.131 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:15:26.206 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:16:06.347 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:16:07.918 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:16:38.082 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:16:39.921 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:16:50.002 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:16:50.987 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:19:02.603 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:19:11.138 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@65277176: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:19:22.605 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5450daa4:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:19:22.665 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor
2020-09-23 10:19:22.674 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@4d59feb: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:19:22.694 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@45e895d0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:19:22.701 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/privado/profesor.jsp
2020-09-23 10:20:53.804 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:21:03.642 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1680deef: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:13.570 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@5a629258:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:21:13.632 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@7e030a42: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:13.654 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@3f3e0079: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:13.663 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:21:33.492 DEBUG org.hibernate.validator.internal.util.logging.LoggerFactory.make(LoggerFactory.java:19) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2020-09-23 10:21:33.495 INFO  org.hibernate.validator.internal.util.Version.<clinit>(Version.java:30) - HV000001: Hibernate Validator 5.2.4.Final
2020-09-23 10:21:33.580 DEBUG org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.detectJPA(DefaultTraversableResolver.java:70) - Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
2020-09-23 10:21:33.671 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:91) - Trying to load META-INF/validation.xml for XML based Validator configuration.
2020-09-23 10:21:33.679 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:54) - Trying to load META-INF/validation.xml via TCCL
2020-09-23 10:21:33.680 DEBUG org.hibernate.validator.internal.xml.ResourceLoaderHelper.getResettableInputStreamForPath(ResourceLoaderHelper.java:60) - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2020-09-23 10:21:33.683 DEBUG org.hibernate.validator.internal.xml.ValidationXmlParser.getValidationXmlInputStream(ValidationXmlParser.java:98) - No META-INF/validation.xml found. Using annotation based configuration only.
2020-09-23 10:21:34.557 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value js20 against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@13a5172c, min=0, message={javax.validation.constraints.Size.message}, payload=[Ljava.lang.Class;@26aef1dd, max=4}, constraintType=GENERIC}.
2020-09-23 10:21:34.591 TRACE org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:108) - Validating value bla bla bla against constraint defined by ConstraintDescriptorImpl{annotation=javax.validation.constraints.Size, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={groups=[Ljava.lang.Class;@13a5172c, min=2, message=Debe contener entre 2 y 100 caracteres, payload=[Ljava.lang.Class;@26aef1dd, max=100}, constraintType=GENERIC}.
2020-09-23 10:21:34.600 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insert(CursoDAOImpl.java:299) - com.mysql.jdbc.JDBC42PreparedStatement@22d6bc4d: INSERT INTO cursos (curso, identificador, horas, idProfesor ) VALUES ('bla bla bla', 'js20', 235, 2);
2020-09-23 10:21:34.648 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@4f3f7d3: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:34.668 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@1ef63fca: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:34.676 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:21:37.940 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@4d59feb: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =16 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:37.961 DEBUG academia.modelo.dao.impl.CursoDAOImpl.delete(CursoDAOImpl.java:353) - com.mysql.jdbc.JDBC42PreparedStatement@45e895d0: DELETE FROM cursos WHERE id = 16 AND idProfesor = 2 ;
2020-09-23 10:21:37.968 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@7467d7bc: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:37.972 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@25c76a9f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:37.981 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:21:39.571 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4a8eeae4: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:41.130 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@3a958fa6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:41.146 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@37681b22: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:41.153 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:21:42.551 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4ca38a6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:53.258 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@33e86e72:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:21:53.302 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:214) - com.mysql.jdbc.JDBC42PreparedStatement@1876a55a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:53.308 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@594baf61: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:21:53.310 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-23 10:22:01.335 DEBUG academia.modelo.dao.impl.CursoDAOImpl.insertByAlumno(CursoDAOImpl.java:334) - com.mysql.jdbc.JDBC42PreparedStatement@4138a9b2:  INSERT INTO alumnosCurso (idAlumno, idCurso) VALUES (4 , 9);
2020-09-23 10:22:01.349 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:214) - com.mysql.jdbc.JDBC42PreparedStatement@41793870: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:22:01.367 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1112294c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:22:01.371 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-23 10:22:09.265 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@9c2a39: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:22:11.070 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:214) - com.mysql.jdbc.JDBC42PreparedStatement@3949578c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:22:11.077 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4f4fcf49: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:22:11.079 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-23 10:23:35.335 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:23:41.050 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@63efbeca: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:23:52.235 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@2196b1f7:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:23:52.276 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@5a629258: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:23:52.309 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@1b5f9863: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:23:52.329 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:25:06.205 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 10:25:09.081 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:25:09.656 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:47) - java.lang.NullPointerException
2020-09-23 10:25:09.659 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:25:09.662 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-23 10:25:19.357 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@42815bd3:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:25:19.400 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@75a54816: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:25:19.423 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@72f03de2: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:25:19.436 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:25:34.785 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@e4b7e59: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:25:44.425 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@4d59feb:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:25:44.472 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@51019fc9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:25:44.498 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@21954332: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:25:44.525 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:26:40.968 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@163ddeb4: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:50.668 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@11850a6:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Elier' AND apellidos = 'Otero' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:26:50.710 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:214) - com.mysql.jdbc.JDBC42PreparedStatement@4ad8fdd6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:50.727 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@be5f7ed: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:50.729 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-23 10:26:55.088 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4dba796b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:56.949 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByAlumno(CursoDAOImpl.java:214) - com.mysql.jdbc.JDBC42PreparedStatement@352fe1c8: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND ac.idAlumno = 4	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:56.959 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@452cfa15: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:26:56.961 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/alumno.jsp
2020-09-23 10:37:26.323 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 10:37:32.706 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1b0dbe9b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:37:43.136 DEBUG academia.modelo.dao.impl.UsuarioDAOImpl.existe(UsuarioDAOImpl.java:53) - com.mysql.jdbc.JDBC42PreparedStatement@4046d30a:  SELECT u.id , u.nombre, u.apellidos, u.rol, u.password
 	FROM usuarios u  	WHERE nombre = 'Ander' AND apellidos = 'Uraga' AND password = MD5('123456') 
   ORDER BY u.id ASC 
 	LIMIT 500 ;
2020-09-23 10:37:43.207 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@71098fb7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:37:43.219 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@3034858c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:37:43.238 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 10:38:13.708 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@26e861be: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:38:13.719 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listarCursosconAlumnos(CursoDAOImpl.java:241) - com.mysql.jdbc.JDBC42PreparedStatement@67d56b85: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 10:38:13.730 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 11:07:03.025 ERROR academia.controller.ProfesorController.doGet(ProfesorController.java:47) - java.lang.NullPointerException
2020-09-23 11:07:03.027 TRACE seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:54) - filtrando URI:/academia/privado/profesor.jsp
2020-09-23 11:07:03.027 WARN  seguridad.SeguridadFilter.doFilter(SeguridadFilter.java:60) - No ha pasado por el LOGIN, usuario NULL, sin autentificar.
2020-09-23 11:07:22.404 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@6086cb21: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 11:35:07.854 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 11:35:15.345 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@19c25f74: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 11:35:29.925 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@5cd20d79: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 11:36:01.286 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@27e81a06: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:03:24.559 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 22:03:29.865 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4714e59c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:04:38.421 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@68feaf4e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:15:37.604 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 22:15:43.081 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@12e19984: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:16:11.490 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@599a3b86: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =6 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:16:18.407 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@2a826ec7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =6 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:16:49.371 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@21b22b41: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =6 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:17:13.542 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@6241308a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =9 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 22:17:44.014 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@42b43547: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =1 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:16:56.304 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 23:17:01.046 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@563d87d9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:23:49.276 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-23 23:23:50.615 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 23:28:02.081 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 23:28:06.753 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@191e9a79: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:29:25.149 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@69f2bc55: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =1 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:29:56.529 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@7e030a42: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =4 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:45:04.011 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-23 23:45:08.218 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1b6929a4: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:46:07.399 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:36) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-23 23:46:07.400 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:51) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-23 23:46:07.413 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@57280cbe: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-23 23:46:07.768 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:86) - GET: cursos recuperados 5
2020-09-23 23:46:07.769 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:61) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 09:37:38.766 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 09:37:43.967 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@62ea1ed0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:39:03.412 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@21b22b41: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:39:34.194 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@3b340ea5: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:40:31.129 DEBUG academia.modelo.dao.impl.CursoDAOImpl.getById(CursoDAOImpl.java:269) - com.mysql.jdbc.JDBC42PreparedStatement@1f356cbe: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	  AND c.id =6 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:53:02.281 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 09:53:06.408 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@63efbeca: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:54:04.975 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:36) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 09:54:04.976 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:51) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 09:54:04.987 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@5a629258: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:54:05.212 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:86) - GET: cursos recuperados 5
2020-09-24 09:54:05.213 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:61) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 09:59:18.670 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1876a55a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:59:24.754 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:51) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 09:59:24.765 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@64a5d14b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 09:59:24.767 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:86) - GET: cursos recuperados 5
2020-09-24 09:59:24.772 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:61) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 09:59:57.594 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@3ae13f06: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:00:49.467 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1db0d43e: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:05:06.578 DEBUG academia.controller.api.CursoRestController.destroy(CursoRestController.java:43) - Se ejecuta cuando se para la App
2020-09-24 10:05:06.587 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-24 10:05:07.611 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 10:15:47.547 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 10:15:51.316 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@49dc386a: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:05.013 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:37) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 10:16:05.015 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:16:05.016 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:null
2020-09-24 10:16:05.033 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@7584c7c3: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:05.328 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:103) - GET: cursos recuperados 5
2020-09-24 10:16:05.330 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:16:26.452 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:16:26.453 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/1
2020-09-24 10:16:26.467 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@57edc388: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:26.479 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:116) - GET: cursos recuperados 1
2020-09-24 10:16:26.479 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:16:33.681 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:16:33.683 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/2
2020-09-24 10:16:33.684 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@8c9e86: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:33.691 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:116) - GET: cursos recuperados 3
2020-09-24 10:16:33.692 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:16:46.059 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:16:46.060 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/3
2020-09-24 10:16:46.062 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@67b6820: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 3 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:46.065 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:116) - GET: cursos recuperados 1
2020-09-24 10:16:46.065 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:16:51.943 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:16:51.943 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/6
2020-09-24 10:16:51.945 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@9866806: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 6 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:16:51.947 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:116) - GET: cursos recuperados 0
2020-09-24 10:16:51.947 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:20:20.226 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:20:20.228 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/6
2020-09-24 10:20:29.483 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@48fbe974: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 6 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:20:38.454 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:116) - GET: cursos recuperados 0
2020-09-24 10:21:10.492 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:24:30.489 DEBUG academia.controller.api.CursoRestController.destroy(CursoRestController.java:44) - Se ejecuta cuando se para la App
2020-09-24 10:24:30.491 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-24 10:24:31.258 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 10:24:33.216 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:37) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 10:24:33.221 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:24:33.248 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/
2020-09-24 10:24:33.851 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@66f322b7: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:24:33.928 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:103) - GET: cursos recuperados 5
2020-09-24 10:24:33.937 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:24:37.947 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:24:37.948 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/2
2020-09-24 10:24:43.524 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@9c6e34f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:24:46.794 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 3
2020-09-24 10:24:53.757 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:24:59.482 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:24:59.483 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/6
2020-09-24 10:25:02.824 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@25580513: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 6 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:25:06.892 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 0
2020-09-24 10:25:13.416 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 10:25:41.711 DEBUG academia.controller.api.CursoRestController.destroy(CursoRestController.java:44) - Se ejecuta cuando se para la App
2020-09-24 10:25:41.725 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-24 10:25:42.930 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 10:28:34.587 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:37) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 10:28:34.589 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 10:28:34.593 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/1
2020-09-24 10:28:41.366 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@51eca55f: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 10:28:41.535 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 1
2020-09-24 10:28:41.536 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:53:18.755 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:53:18.757 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/1
2020-09-24 11:53:18.776 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@6daf8e96: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:53:18.842 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 1
2020-09-24 11:53:18.842 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:53:24.501 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:53:24.502 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/0
2020-09-24 11:53:24.512 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@5d2caf06: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:53:24.520 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:103) - GET: cursos recuperados 5
2020-09-24 11:53:24.520 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:02.374 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:02.375 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/1
2020-09-24 11:54:02.379 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@48e2fc8b: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:02.389 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 1
2020-09-24 11:54:02.391 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:07.630 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:07.631 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/2
2020-09-24 11:54:07.633 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1ed41bd9: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:07.637 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 3
2020-09-24 11:54:07.637 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:13.038 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:13.039 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/3
2020-09-24 11:54:13.045 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1c6a817: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 3 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:13.050 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 1
2020-09-24 11:54:13.050 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:35.078 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:35.080 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/4
2020-09-24 11:54:35.082 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@79015f62: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 4 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:35.087 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 0
2020-09-24 11:54:35.092 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:40.655 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:40.656 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/3
2020-09-24 11:54:40.657 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@64eec348: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 3 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:40.660 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 1
2020-09-24 11:54:40.660 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:54:44.551 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:52) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:54:44.552 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:62) - url pathInfo:/2
2020-09-24 11:54:44.554 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1c11a53d: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:54:44.561 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:118) - GET: cursos recuperados 3
2020-09-24 11:54:44.562 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:75) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:56:22.793 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 11:56:27.344 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@32f1ebfa: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:56:48.906 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:38) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 11:56:48.912 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:56:48.913 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:null
2020-09-24 11:56:48.940 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@9fef342: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:56:49.102 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:104) - GET: cursos recuperados 5
2020-09-24 11:56:49.103 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:07.476 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:07.478 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/0
2020-09-24 11:57:07.484 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@7b273917: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:07.493 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:104) - GET: cursos recuperados 5
2020-09-24 11:57:07.499 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:10.744 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:10.747 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/1
2020-09-24 11:57:10.749 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@5b6a1ae8: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:10.781 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:119) - GET: cursos recuperados 1
2020-09-24 11:57:10.788 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:14.069 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:14.070 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/2
2020-09-24 11:57:14.071 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@6233b6: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:14.088 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:119) - GET: cursos recuperados 3
2020-09-24 11:57:14.089 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:17.193 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:17.194 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/3
2020-09-24 11:57:17.195 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@1abfbfdc: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 3 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:17.198 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:119) - GET: cursos recuperados 1
2020-09-24 11:57:17.199 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:19.722 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:19.724 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/4
2020-09-24 11:57:19.728 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@5a6ff595: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 4 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:19.730 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:119) - GET: cursos recuperados 0
2020-09-24 11:57:19.734 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 11:57:22.415 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:53) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 11:57:22.417 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:63) - url pathInfo:/2
2020-09-24 11:57:22.418 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@641f9f0: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 11:57:22.421 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:119) - GET: cursos recuperados 3
2020-09-24 11:57:22.422 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:76) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 12:05:35.649 DEBUG academia.controller.api.CursoRestController.destroy(CursoRestController.java:45) - Se ejecuta cuando se para la App
2020-09-24 12:05:35.651 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-24 12:05:36.806 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 12:28:07.132 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-24 12:28:11.205 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@1c1e8949: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 12:28:23.603 DEBUG academia.controller.api.CursoRestController.init(CursoRestController.java:39) - Se ejecuta SOLO la 1º vez que recibe una petición
2020-09-24 12:28:23.603 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:54) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 12:28:23.604 DEBUG academia.controller.api.CursoRestController.getIdFromPath(CursoRestController.java:110) - url pathInfo:/2
2020-09-24 12:28:23.608 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@21b22b41: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 2 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 12:28:23.839 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:150) - GET: cursos recuperados 2
2020-09-24 12:28:23.840 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:83) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 12:28:32.360 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:54) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 12:28:32.363 DEBUG academia.controller.api.CursoRestController.getIdFromPath(CursoRestController.java:110) - url pathInfo:/1
2020-09-24 12:28:32.371 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@6a19c191: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 1 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 12:28:32.387 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:150) - GET: cursos recuperados 1
2020-09-24 12:28:32.387 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:83) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 12:28:36.734 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:54) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 12:28:36.736 DEBUG academia.controller.api.CursoRestController.getIdFromPath(CursoRestController.java:110) - url pathInfo:/9
2020-09-24 12:28:36.740 DEBUG academia.modelo.dao.impl.CursoDAOImpl.cursosByProfesor(CursoDAOImpl.java:186) - com.mysql.jdbc.JDBC42PreparedStatement@2ed3a268: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 AND u.id = 9 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 12:28:36.760 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:150) - GET: cursos recuperados 9
2020-09-24 12:28:36.761 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:83) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-24 12:28:40.668 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:54) - Se ejecuta ANTES de GET, POST, PUT o DELETE
2020-09-24 12:28:40.672 DEBUG academia.controller.api.CursoRestController.getIdFromPath(CursoRestController.java:110) - url pathInfo:/0
2020-09-24 12:28:40.677 DEBUG academia.modelo.dao.impl.CursoDAOImpl.listar(CursoDAOImpl.java:159) - com.mysql.jdbc.JDBC42PreparedStatement@4b2680c: 	SELECT 
	c.id 'curso_id', 
	c.curso 'curso_nombre',	
	c.identificador 'identificador', 
	c.horas 'horas', 
	u.id 'usuario_id', 
	u.nombre 'usuario_nombre', 
	u.apellidos 'usuario_apellidos', 
	rol, 
	COUNT(ac.idAlumno) AS 'numero_alumnos' 
	FROM usuarios u , cursos c
	LEFT JOIN alumnosCurso ac 
	ON ac.idCurso = c.id 
	WHERE c.idProfesor = u.id 	 	GROUP BY c.id 
	ORDER BY c.id ASC 
	LIMIT 500;

2020-09-24 12:28:40.681 DEBUG academia.controller.api.CursoRestController.doGet(CursoRestController.java:135) - GET: cursos recuperados 5
2020-09-24 12:28:40.682 DEBUG academia.controller.api.CursoRestController.service(CursoRestController.java:83) - Se ejecuta DESPUES de GET, POST, PUT o DELETE
2020-09-25 10:49:12.706 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-28 08:22:20.662 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-28 09:45:53.391 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-29 09:07:58.692 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
2020-09-29 09:11:52.492 TRACE seguridad.SeguridadFilter.destroy(SeguridadFilter.java:39) - se destruye filtro
2020-09-29 09:11:54.668 TRACE seguridad.SeguridadFilter.init(SeguridadFilter.java:73) - se inicializa filtro
